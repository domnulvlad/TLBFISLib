/*
  Title:
    07.Bitmaps.ino

  Description:
    Demonstrates drawing bitmaps.

  Notes:
    *The bitmaps should be defined in PROGMEM (to save SRAM space), in which case they must be arrays of constant uint8_t/unsigned char variables.
    *If a bitmap is not declared with the "PROGMEM" attribute, when calling the drawBitmap() function, the last parameter should be "false".

    *The drawBitmap() function must be given the bitmap's dimensions. You can specify a height smaller than the actual height of the image, but the width must
    be the real value. To draw less than the total width, you should set a workspace according to the required dimensions, then draw the bitmap inside.
    *Providing a width smaller than the real bitmap width will produce a garbled image.
    *Providing a width/height larger than the real bitmap can lead to unpredictable results (most commonly, crashes).

    *Bitmaps can easily be generated with the https://javl.github.io/image2cpp/ tool.
    *For halfscreen, the max visible size is 64x48, and for fullscreen it is 64x88.

    *Like with text, bitmaps have a setting which can be changed:
      * setBitmapTransparency
      
    *The color is global for drawing commands:
      * setDrawColor

    *If no option is changed by the user, the following defaults are used:
      * transparency = TLBFISLib::OPAQUE
      * color = TLBFISLib::NORMAL
*/

//Include the FIS library.
#include <TLBFISLib.h>

//Include the SPI library.
#include <SPI.h>

//Hardware configuration
#define SPI_INSTANCE SPI
#define ENA_PIN      9

//Define the function to be called when the library needs to send a byte.
void sendFunction(uint8_t data)
{
  SPI_INSTANCE.beginTransaction(SPISettings(125000, MSBFIRST, SPI_MODE3));
  SPI_INSTANCE.transfer(data);
  SPI_INSTANCE.endTransaction();
}

//Define the function to be called when the library is initialized by begin().
void beginFunction()
{
  SPI_INSTANCE.begin();
}

//Create an instance of the FIS library.
TLBFISLib FIS(ENA_PIN, sendFunction, beginFunction);

//64x45
const unsigned char logo[] PROGMEM = {
	0xff, 0xff, 0xc0, 0x7e, 0x00, 0x03, 0xff, 0xf0, 0xff, 0xff, 0xc0, 0x7e, 0x00, 0x03, 0xff, 0xf8, 
	0xff, 0xff, 0xc0, 0x7e, 0x00, 0x03, 0xff, 0xfc, 0xff, 0xff, 0xc0, 0x7e, 0x00, 0x03, 0xff, 0xfc, 
	0xff, 0xff, 0xc0, 0x7e, 0x00, 0x03, 0xff, 0xfc, 0xff, 0xff, 0xc0, 0x7e, 0x00, 0x03, 0xff, 0xfc, 
	0x03, 0xf0, 0x00, 0x7e, 0x00, 0x03, 0xf0, 0x3c, 0x03, 0xf0, 0x00, 0x7e, 0x00, 0x03, 0xf0, 0x3c, 
	0x03, 0xf0, 0x00, 0x7e, 0x00, 0x03, 0xff, 0xfc, 0x03, 0xf0, 0x00, 0x7e, 0x00, 0x03, 0xff, 0xf8, 
	0x03, 0xf0, 0x00, 0x7e, 0x00, 0x03, 0xff, 0xf0, 0x03, 0xf0, 0x00, 0x7e, 0x00, 0x03, 0xff, 0xfc, 
	0x03, 0xf0, 0x00, 0x7e, 0x00, 0x03, 0xff, 0xfe, 0x03, 0xf0, 0x00, 0x7e, 0x00, 0x03, 0xff, 0xff, 
	0x03, 0xf0, 0x00, 0x7e, 0x00, 0x03, 0xf0, 0x3f, 0x03, 0xf0, 0x00, 0x7e, 0x00, 0x03, 0xf0, 0x3f, 
	0x03, 0xf0, 0x00, 0x7f, 0xfe, 0x03, 0xff, 0xff, 0x03, 0xf0, 0x00, 0x7f, 0xfe, 0x03, 0xff, 0xff, 
	0x03, 0xf0, 0x00, 0x7f, 0xfe, 0x03, 0xff, 0xff, 0x03, 0xf0, 0x00, 0x7f, 0xfe, 0x03, 0xff, 0xff, 
	0x03, 0xf0, 0x00, 0x7f, 0xfe, 0x03, 0xff, 0xfe, 0x03, 0xf0, 0x00, 0x7f, 0xfe, 0x03, 0xff, 0xfc, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x07, 0xe0, 0x00, 0xff, 0xff, 
	0xff, 0xff, 0xc0, 0x07, 0xe0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x07, 0xe0, 0x03, 0xff, 0xff, 
	0xff, 0xff, 0xc0, 0x07, 0xe0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x07, 0xe0, 0x03, 0xff, 0xff, 
	0xff, 0xff, 0xc0, 0x07, 0xe0, 0x03, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x07, 0xe0, 0x03, 0xf0, 0x00, 
	0xfc, 0x00, 0x00, 0x07, 0xe0, 0x03, 0xf0, 0x00, 0xfc, 0x00, 0x00, 0x07, 0xe0, 0x03, 0xff, 0xfc, 
	0xfc, 0x00, 0x00, 0x07, 0xe0, 0x03, 0xff, 0xfe, 0xff, 0xfc, 0x00, 0x07, 0xe0, 0x03, 0xff, 0xff, 
	0xff, 0xfc, 0x00, 0x07, 0xe0, 0x03, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x07, 0xe0, 0x01, 0xff, 0xff, 
	0xff, 0xfc, 0x00, 0x07, 0xe0, 0x00, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x3f, 
	0xff, 0xfc, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x07, 0xe0, 0x03, 0xff, 0xff, 
	0xfc, 0x00, 0x00, 0x07, 0xe0, 0x03, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x07, 0xe0, 0x03, 0xff, 0xff, 
	0xfc, 0x00, 0x00, 0x07, 0xe0, 0x03, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x07, 0xe0, 0x03, 0xff, 0xfe, 
	0xfc, 0x00, 0x00, 0x07, 0xe0, 0x03, 0xff, 0xfc
};

//25x25
const unsigned char qr[] PROGMEM = {
  0xfe, 0x2a, 0x3f, 0x80, 0x82, 0x6a, 0xa0, 0x80, 0xba, 0x62, 0xae, 0x80, 0xba, 0xaf, 0xae, 0x80,
  0xba, 0x94, 0xae, 0x80, 0x82, 0x66, 0xa0, 0x80, 0xfe, 0xaa, 0xbf, 0x80, 0x00, 0x4b, 0x00, 0x00,
  0xc7, 0x6f, 0x0c, 0x00, 0xf9, 0x33, 0x1f, 0x00, 0x6a, 0xcb, 0x1d, 0x80, 0x31, 0xa1, 0xf4, 0x80,
  0xb7, 0x68, 0xb0, 0x80, 0xa8, 0x35, 0x51, 0x00, 0x8e, 0xaf, 0x7d, 0x80, 0x8d, 0xd1, 0xb6, 0x80,
  0xb2, 0xe7, 0xfa, 0x00, 0x00, 0x94, 0x88, 0x00, 0xfe, 0xfc, 0xa8, 0x80, 0x82, 0xa3, 0x88, 0x00,
  0xba, 0x3f, 0xfb, 0x00, 0xba, 0x37, 0xe1, 0x80, 0xba, 0x66, 0x06, 0x80, 0x82, 0xa1, 0x98, 0x80,
  0xfe, 0xf0, 0xe4, 0x80
};

void setup() {
  //Here, the custom error function is declared directly, as a lambda function.
  //In the example "02.Custom_functions" you can see how to define it as a separate function.
  FIS.errorFunction(
    [](unsigned long duration) {
      //Errors are measured in milliseconds, to offer the possibility of differentiating between events.
      //Here, this value won't be used, so cast it to void to avoid a compiler warning.
      (void) duration;
      
      //Initialize the screen.
      FIS.initScreen();
      
      //Draw the demo.
      drawScreen();
    }
  );

  //Start the library and initialize the screen.
  FIS.begin();
  FIS.initScreen();

  //All commands have been moved to the drawScreen() function (defined below), so that the custom functions can also execute it.
  drawScreen();
}

void loop() {
  //Maintain the connection.
  FIS.update();
}

void drawScreen() {
  //Draw the logo bitmap at position X0, Y2, with its width of 64px and a height of 45px.
  FIS.drawBitmap(0, 2, 64, 45, logo);

  //Set a workspace in the middle of the FIS and clear it.
  //The size of the QR code is 25x25px, so a rectangle of 27x27px should be cleared "behind it" to make the code readable.
  FIS.setWorkspace((64 - 27) / 2, (48 - 27) / 2, 27, 27, true); //"true" = also clear
  
  //Draw the QR code bitmap at position X1, Y1 (inside the workspace defined above), with its width and height of 25px.
  FIS.drawBitmap(1, 1, 25, 25, qr);

  //It is not necessary to reset the workspace, because an "error" event will automatically clear all custom workspaces.
}